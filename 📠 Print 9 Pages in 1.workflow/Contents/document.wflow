<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>444.1</string>
	<key>AMApplicationVersion</key>
	<string>2.8</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>-- 20/09/2014: Force show more printing options-- 22/03/2016: fixed bug where powerpoint has encoded characters in filename and scale to 105%-- 16/08/2016: fixed layout direction-- 26/09/2016: fix for MacOS Sierra-- 01 October 2017: fix for MacOS High Sierra-- https://github.com/lawrencetingproperty maxRadioGrpNum : 2global every_window_nameglobal front_window_nameglobal count_of_windowsglobal currentNumberWindowsglobal filenameglobal revisionsglobal scaleTextFieldNumon run --{input, parameters}	set every_window_name to {}	set front_window_name to ""	set count_of_windows to 0	set currentNumberWindows to 0	set revisions to ""	set encodedChars to {"%20", "%20", "%21", "%21", "%22", "%22", "%23", "%23", "%24", "%24", "%25", "%25", "%26", "%26", "%27", "%27", "%28", "%28", "%29", "%29", "%2A", "%2A", "%2B", "%2B", "%2C", "%2C", "%2D", "%2D", "%2E", "%2E", "%2F", "%2F", "%30", "%30", "%31", "%31", "%32", "%32", "%33", "%33", "%34", "%34", "%35", "%35", "%36", "%36", "%37", "%37", "%38", "%38", "%39", "%39", "%3A", "%3A", "%3B", "%3B", "%3C", "%3C", "%3D", "%3D", "%3E", "%3E", "%3F", "%3F", "%40", "%40", "%41", "%41", "%42", "%42", "%43", "%43", "%44", "%44", "%45", "%45", "%46", "%46", "%47", "%47", "%48", "%48", "%49", "%49", "%4A", "%4A", "%4B", "%4B", "%4C", "%4C", "%4D", "%4D", "%4E", "%4E", "%4F", "%4F", "%50", "%50", "%51", "%51", "%52", "%52", "%53", "%53", "%54", "%54", "%55", "%55", "%56", "%56", "%57", "%57", "%58", "%58", "%59", "%59", "%5A", "%5A", "%5B", "%5B", "%5C", "%5C", "%5D", "%5D", "%5E", "%5E", "%5F", "%5F", "%60", "%60", "%61", "%61", "%62", "%62", "%63", "%63", "%64", "%64", "%65", "%65", "%66", "%66", "%67", "%67", "%68", "%68", "%69", "%69", "%6A", "%6A", "%6B", "%6B", "%6C", "%6C", "%6D", "%6D", "%6E", "%6E", "%6F", "%6F", "%70", "%70", "%71", "%71", "%72", "%72", "%73", "%73", "%74", "%74", "%75", "%75", "%76", "%76", "%77", "%77", "%78", "%78", "%79", "%79", "%7A", "%7A", "%7B", "%7B", "%7C", "%7C", "%7D", "%7D", "%7E", "%7E", "%7F", "%7F", "%80", "%E2%82%AC", "%81", "%81", "%82", "%E2%80%9A", "%83", "%C6%92", "%84", "%E2%80%9E", "%85", "%E2%80%A6", "%86", "%E2%80%A0", "%87", "%E2%80%A1", "%88", "%CB%86", "%89", "%E2%80%B0", "%8A", "%C5%A0", "%8B", "%E2%80%B9", "%8C", "%C5%92", "%8D", "%C5%8D", "%8E", "%C5%BD", "%8F", "%8F", "%90", "%C2%90", "%91", "%E2%80%98", "%92", "%E2%80%99", "%93", "%E2%80%9C", "%94", "%E2%80%9D", "%95", "%E2%80%A2", "%96", "%E2%80%93", "%97", "%E2%80%94", "%98", "%CB%9C", "%99", "%E2%84", "%9A", "%C5%A1", "%9B", "%E2%80", "%9C", "%C5%93", "%9D", "%9D", "%9E", "%C5%BE", "%9F", "%C5%B8", "%A0", "%C2%A0", "%A1", "%C2%A1", "%A2", "%C2%A2", "%A3", "%C2%A3", "%A4", "%C2%A4", "%A5", "%C2%A5", "%A6", "%C2%A6", "%A7", "%C2%A7", "%A8", "%C2%A8", "%A9", "%C2%A9", "%AA", "%C2%AA", "%AB", "%C2%AB", "%AC", "%C2%AC", "%AD", "%C2%AD", "%AE", "%C2%AE", "%AF", "%C2%AF", "%B0", "%C2%B0", "%B1", "%C2%B1", "%B2", "%C2%B2", "%B3", "%C2%B3", "%B4", "%C2%B4", "%B5", "%C2%B5", "%B6", "%C2%B6", "%B7", "%C2%B7", "%B8", "%C2%B8", "%B9", "%C2%B9", "%BA", "%C2%BA", "%BB", "%C2%BB", "%BC", "%C2%BC", "%BD", "%C2%BD", "%BE", "%C2%BE", "%BF", "%C2%BF", "%C0", "%C3%80", "%C1", "%C3%81", "%C2", "%C3%82", "%C3", "%C3%83", "%C4", "%C3%84", "%C5", "%C3%85", "%C6", "%C3%86", "%C7", "%C3%87", "%C8", "%C3%88", "%C9", "%C3%89", "%CA", "%C3%8A", "%CB", "%C3%8B", "%CC", "%C3%8C", "%CD", "%C3%8D", "%CE", "%C3%8E", "%CF", "%C3%8F", "%D0", "%C3%90", "%D1", "%C3%91", "%D2", "%C3%92", "%D3", "%C3%93", "%D4", "%C3%94", "%D5", "%C3%95", "%D6", "%C3%96", "%D7", "%C3%97", "%D8", "%C3%98", "%D9", "%C3%99", "%DA", "%C3%9A", "%DB", "%C3%9B", "%DC", "%C3%9C", "%DD", "%C3%9D", "%DE", "%C3%9E", "%DF", "%C3%9F", "%E0", "%C3%A0", "%E1", "%C3%A1", "%E2", "%C3%A2", "%E3", "%C3%A3", "%E4", "%C3%A4", "%E5", "%C3%A5", "%E6", "%C3%A6", "%E7", "%C3%A7", "%E8", "%C3%A8", "%E9", "%C3%A9", "%EA", "%C3%AA", "%EB", "%C3%AB", "%EC", "%C3%AC", "%ED", "%C3%AD", "%EE", "%C3%AE", "%EF", "%C3%AF", "%F0", "%C3%B0", "%F1", "%C3%B1", "%F2", "%C3%B2", "%F3", "%C3%B3", "%F4", "%C3%B4", "%F5", "%C3%B5", "%F6", "%C3%B6", "%F7", "%C3%B7", "%F8", "%C3%B8", "%F9", "%C3%B9", "%FA", "%C3%BA", "%FB", "%C3%BB", "%FC", "%C3%BC", "%FD", "%C3%BD", "%FE", "%C3%BE", "%FF", "%C3%BF", "%00", "%01", "%02", "%03", "%04", "%05", "%06", "%07", "%08", "%09", "%0A", "%0B", "%0C", "%0D", "%0E", "%0F", "%10", "%11", "%12", "%13", "%14", "%15", "%16", "%17", "%18", "%19", "%1A", "%1B", "%1C", "%1D", "%1E", "%1F"}		activate --To bring pop-up window to front	set dialogBox to display dialog "Output:" buttons {"Color", "Black &amp; White"} default button 1	set buttonReturned to button returned of dialogBox		tell application "Microsoft PowerPoint"		activate		(*		tell active presentation			repeat with a from 1 to count slides				tell slide a					repeat with b from 1 to count shape						try							tell font of text range of text frame of shape b								set font color to {0, 0, 0}							end tell						end try					end repeat				end tell			end repeat		end tell			*)		set filename to (name of active presentation) &amp; ".pdf"		--set pathofPPT to (path of active presentation)				set fit to page of print options of active presentation to true		set frame slides of print options of active presentation to true		set number of copies of print options of active presentation to 1		set output type of print options of active presentation to print slides		set print color type of print options of active presentation to print color		if buttonReturned is "Black &amp; White" then set print color type of print options of active presentation to print black and white	end tell		--find encoded characters in file name	repeat with char in encodedChars		if filename contains char then			activate			display dialog "Unable to convert. Filename contains encoded characters. Eg. %28 and %29. Please remove those characters." buttons {"OK"} with icon 0			return		end if	end repeat		---------	--	not working - fix this	---------			set aScript to "tell application \"Microsoft PowerPoint\" to print out active presentation"	do shell script "osascript -e " &amp; quoted form of aScript &amp; " &gt; /dev/null 2&gt;&amp;1 &amp;"		---------		---------		record_current_windows_num() --edited		tell application "System Events" to tell application process "PowerPoint"				repeat until window "Print" exists		end repeat				tell menu button "PDF" of window "Print" --edited			click			click menu item "Open in Preview" of menu 1		end tell	end tell		--tell application "Microsoft PowerPoint" to undo active presentation		----------------------------------------------------------------------------------------------------------	-- Print 9 in 1	----------------------------------------------------------------------------------------------------------	wait_for_windows_num_to_increase()		script click_print_wait_print_sheet_click_scale		set aScript to "tell application \"Preview\" to print the front document with print dialog"		do shell script "osascript -e " &amp; quoted form of aScript &amp; " &gt; /dev/null 2&gt;&amp;1 &amp;"		wait_for_print_pane() --Wait for the Print pane			--click_rb(1, "number", 1) --Scale		end script		run script click_print_wait_print_sheet_click_scale		set scaleTextFieldNum to getScaleTextField()		--click_rb(1, "number", 1) --Scale		change_scale("102") --Change Scale	click_rb("auto", "description", "Landscape") --swicth to landscape mode		click_pop_up_button("Description:", "PDE", "Menu Item:", "Layout")	click_pop_up_button("Description:", "Pages per Sheet", "Menu Item:", "9")	click_rb("auto", "description", "right bottom right") --change layout direction		record_current_windows_num()	click_menu_button("Button Name:", "PDF", "Menu Item:", "Open PDF in Preview")	wait_for_windows_num_to_increase()		----------------------------------------------------------------------------------------------------------	-- Increase Scale	----------------------------------------------------------------------------------------------------------	repeat with x from 1 to count_of_windows		if (item x of every_window_name contains filename &amp; " (") and ¬			(item x of every_window_name contains "page") and ¬			(item x of every_window_name contains ")") ¬				then tell application "Preview" to close window x	end repeat		run script click_print_wait_print_sheet_click_scale		--click_rb(1, "number", 1) --Scale				change_scale("105") --Change Scale	click_rb("auto", "description", "Landscape") --swicth to landscape mode		record_current_windows_num()	click_menu_button("Button Name:", "PDF", "Menu Item:", "Open PDF in Preview")	wait_for_windows_num_to_increase()		----------------------------------------------------------------------------------------------------------	-- Open Save Window	----------------------------------------------------------------------------------------------------------		repeat with x from 1 to count_of_windows		if (item x of every_window_name contains filename &amp; ".pdf (") and ¬			(item x of every_window_name contains "page") and ¬			(item x of every_window_name contains ")") ¬				then tell application "Preview" to close window x	end repeatend run---------------------------------------------------------------------------------------------------------------------on getScaleTextField()	tell application "System Events" to tell sheet 1 of window 1 of process "Preview"				set every_textfield to value of every text field				repeat with i from 1 to (number of items in every_textfield)			if item i in every_textfield contains "%" then return i		end repeat	end tellend getScaleTextField---------------------------------------------------------------------------------------------------------------------on change_scale(num)	tell application "System Events" to tell sheet 1 of window 1 of process "Preview"		set focused of text field scaleTextFieldNum to true		set value of text field scaleTextFieldNum to num	end tellend change_scale---------------------------------------------------------------------------------------------------------------------on click_menu_button("Button Name:", b_name, "Menu Item:", menuItem)	tell application "System Events" to tell menu button b_name of sheet 1 of window 1 of process "Preview"		click		click menu item menuItem of menu 1	end tellend click_menu_button---------------------------------------------------------------------------------------------------------------------on click_pop_up_button("Description:", theDescription, "Menu Item:", menuItem)	tell application "System Events" to tell process "Preview" to tell sheet 1 of window 1		tell (first pop up button whose description is theDescription)			click			click menu item menuItem of menu 1		end tell	end tell -- sheetend click_pop_up_button---------------------------------------------------------------------------------------------------------------------on click_rb(grp_num, btn_attr, btn_val)	tell application "System Events" to tell sheet 1 of window 1 of process "Preview"				if btn_attr is "number" then			tell radio button btn_val of radio group grp_num				repeat while value is 0					click				end repeat			end tell		end if				repeat with i from 1 to maxRadioGrpNum			try				tell radio group i					if btn_attr is "description" then						tell (first radio button whose description is btn_val)							repeat while value is 0								click							end repeat						end tell											else if btn_attr is "title" then						tell (first radio button whose title is btn_val)							repeat while value is 0								click							end repeat						end tell					end if				end tell				exit repeat			on error				if i is equal to maxRadioGrpNum then log "error!"			end try		end repeat			end tellend click_rb---------------------------------------------------------------------------------------------------------------------on getWindows()	tell application "Preview"		try			set every_window_name to name of every window		end try		try			set front_window_name to name of window 1		end try		try			set count_of_windows to count of windows		end try	end tellend getWindows---------------------------------------------------------------------------------------------------------------------on record_current_windows_num()	getWindows()	set currentNumberWindows to contents of count_of_windowsend record_current_windows_num---------------------------------------------------------------------------------------------------------------------on wait_for_print_pane() --Wait for the Print pane	tell application "System Events" to tell sheet 1 of window 1 of process "Preview"		repeat until exists		end repeat				tell button "Show Details" --force show advanced printing options			repeat while exists				click			end repeat		end tell	end tellend wait_for_print_pane---------------------------------------------------------------------------------------------------------------------on wait_for_windows_num_to_increase()	repeat while (count_of_windows &lt; currentNumberWindows or count_of_windows = 0)		getWindows()	end repeat		repeat while (every_window_name as string) does not contain (filename &amp; revisions)		getWindows()	end repeat		repeat while (front_window_name as string) does not contain (filename &amp; revisions)		getWindows()	end repeat		set revisions to revisions &amp; ".pdf"end wait_for_windows_num_to_increase</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>A74FDD9B-D948-4D61-B50A-CA243C999854</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>1F6B120A-780D-40F7-A250-3133B38A0DC5</string>
				<key>UUID</key>
				<string>92C6A84E-FAE1-40A9-BDDF-6843F1D13033</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>359.500000:316.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>on run --{input, parameters}	killApp("WorkflowServiceRunner")end runon killApp(badapp)	do shell script "ps ax | grep -i " &amp; quoted form of badapp &amp; " | grep -v grep | cut -c 1-6"	set pNum to result	try		do shell script "kill -9 " &amp; pNum	end tryend killApp</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>518D0CB7-7722-495C-96D4-F746EA76F60A</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>85853E12-91D5-4534-A071-22DFAD04EE1C</string>
				<key>UUID</key>
				<string>8022C0D5-8505-4F43-9C7F-0FB8B04720D4</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>359.500000:562.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict>
		<key>3AA7EAE6-4C18-493E-A67B-81587D2968AB</key>
		<dict>
			<key>from</key>
			<string>92C6A84E-FAE1-40A9-BDDF-6843F1D13033 - 92C6A84E-FAE1-40A9-BDDF-6843F1D13033</string>
			<key>to</key>
			<string>8022C0D5-8505-4F43-9C7F-0FB8B04720D4 - 8022C0D5-8505-4F43-9C7F-0FB8B04720D4</string>
		</dict>
	</dict>
	<key>workflowMetaData</key>
	<dict>
		<key>serviceApplicationBundleID</key>
		<string>com.microsoft.Powerpoint</string>
		<key>serviceApplicationPath</key>
		<string>/Applications/Microsoft Office 2011/Microsoft PowerPoint.app</string>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<integer>0</integer>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
