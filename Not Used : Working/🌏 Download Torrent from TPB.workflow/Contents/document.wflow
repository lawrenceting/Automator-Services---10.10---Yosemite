<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>381</string>
	<key>AMApplicationVersion</key>
	<string>2.4</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>-- Works with Mountain Lion and Mavericks -- http://lawrenceting.tk/-- Last Updated on 19 February 2014on run	--Get the URL 	set the clipboard to ""	activate application ("Firefox")	menu_click({"Firefox", "File", "Open Location…"})	menu_click({"Firefox", "Edit", "Copy"})		repeat while (the clipboard) is ""		activate application ("Firefox")		menu_click({"Firefox", "File", "Open Location…"})		menu_click({"Firefox", "Edit", "Copy"})	end repeat	set copiedURL to the clipboard		--If website is not TPB	if (copiedURL does not contain "thepiratebay") or (copiedURL does not contain "torrent") then		activate		display dialog "URL is not valid." with icon 0 giving up after 1		killApp("WorkflowServiceRunner")		error number -128	end if		--Get the Hash	set theHash to ""	try		set theHash to do shell script "curl --silent '" &amp; copiedURL &amp; "' | grep -E '(&lt;/dl&gt;|&lt;/dl&gt;)'"		set theHash to FindAndReplaceText of theHash from "&lt;/dl&gt;" to ""		set theHash to FindAndReplaceText of theHash from " " to "" --remove spaces		set theHash to FindAndReplaceText of theHash from "	" to "" --remove tabs		set theHash to FindAndReplaceText of theHash from return to "" --remove next line	end try		return theHashend run---------------------------------------------------------------------------------------------------on FindAndReplaceText of t from s to r	set d to text item delimiters	set text item delimiters to s	set t to t's text items	set text item delimiters to r	tell t to set t to beginning &amp; ({""} &amp; rest)	set text item delimiters to d	tend FindAndReplaceText---------------------------------------------------------------------------------------------------on menu_click(mList)	-- `menu_click`, by Jacob Rus, September 2006	-- 	-- Accepts a list of form: `{"Finder", "View", "Arrange By", "Date"}`	-- Execute the specified menu item.  In this case, assuming the Finder 	-- is the active application, arranging the frontmost folder by date.	local appName, topMenu, r		-- Validate our input	if mList's length &lt; 3 then error "Menu list is not long enough"		-- Set these variables for clarity and brevity later on	set {appName, topMenu} to (items 1 through 2 of mList)	set r to (items 3 through (mList's length) of mList)		-- This overly-long line calls the menu_recurse function with	-- two arguments: r, and a reference to the top-level menu	tell application "System Events" to my menu_click_recurse(r, ((process appName)'s ¬		(menu bar 1)'s (menu bar item topMenu)'s (menu topMenu)))end menu_clickon menu_click_recurse(mList, parentObject)	local f, r		-- `f` = first item, `r` = rest of items	set f to item 1 of mList	if mList's length &gt; 1 then set r to (items 2 through (mList's length) of mList)		-- either actually click the menu item, or recurse again	tell application "System Events"		if mList's length is 1 then			click parentObject's menu item f		else			my menu_click_recurse(r, (parentObject's (menu item f)'s (menu f)))		end if	end tellend menu_click_recurse---------------------------------------------------------------------------------------------------</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>Disabled</key>
				<false/>
				<key>InputUUID</key>
				<string>52C85D50-7DA1-47E7-B949-88258CEF9033</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>3629679D-00B5-40B9-B5BA-D50803A90853</string>
				<key>UUID</key>
				<string>E8AB31C0-36DB-4F67-B2D0-D7666DF3ED24</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>353.000000:1308.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/English.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>property button_1 : "Cancel"property button_2 : "Use Magnet Link"global torrentURLon run {input, parameters}		set theHash to input as string		if (count of theHash) is not 40 then		activate --To bring pop-up window to front		display dialog "Info hash is invalid or less than 40 characters." with icon 0 giving up after 1		killApp("WorkflowServiceRunner")		error number -128	end if		--Get the torrent	set torrentURL to false	if (count of theHash) is 40 and permittedChar(theHash) is true then		if torrentURL is false then torrentURL_func("http://torcache.net/torrent/" &amp; theHash &amp; ".torrent")		if torrentURL is false then torrentURL_func("http://torrage.com/torrent/" &amp; theHash &amp; ".torrent")		if torrentURL is false then torrentURL_func("http://zoink.it/torrent/" &amp; theHash &amp; ".torrent")	end if		if torrentURL is false then		activate --To bring pop-up window to front		set dialogBox to display dialog "Unable to download torrent." with icon 0 buttons {button_1, button_2} default button 2 cancel button 1				set buttonReturned to button returned of dialogBox				if (buttonReturned is button_2) then			set theMagnetLink to do shell script "curl --silent '" &amp; copiedURL &amp; "' | grep -E '(magnet:|magnet:)' | sed -e 's/&lt;a style/\\" &amp; return &amp; "&lt;a style/g' | tail -1"						set theMagnetLink to FindAndReplaceText of theMagnetLink from "&lt;a style='background-image: url(\"/static/img/icons/icon-magnet.gif\");' href=\"" to ""			set theMagnetLink to FindAndReplaceText of theMagnetLink from "\" title=\"Get this torrent\"&gt;&amp;nbsp;Get this torrent&lt;/a&gt;" to ""			set theMagnetLink to FindAndReplaceText of theMagnetLink from " " to "" --remove spaces			set theMagnetLink to FindAndReplaceText of theMagnetLink from "	" to "" --remove tabs			set theMagnetLink to FindAndReplaceText of theMagnetLink from return to "" --remove next line		end if	end if		activate application "uTorrent"	tell application "System Events" to tell process "µTorrent"		repeat until window 1 exists			click menu item "µTorrent" of menu 1 of menu bar item "Window" of menu bar 1		end repeat	end tell		activate application "uTorrent"	menu_click({"uTorrent", "File", "Open Torrent From URL..."})		tell application "System Events" to tell process "µTorrent"		tell window "µTorrent"						repeat until sheet 1 exists			end repeat						tell sheet 1				if torrentURL is not false then set value of text field 1 to torrentURL				if torrentURL is false then set value of text field 1 to theMagnetLink				click button "OK"			end tell		end tell				repeat until name of window 1 is not "µTorrent"		end repeat				tell window 1 to tell group 1 to tell pop up button 1			if value is not "/Users/Lawrence/Downloads" then				click				delay 1.0E-3				keystroke "/" --down				key code 36 --enter			end if		end tell	end tellend run---------------------------------------------------------------------------------------------------on FindAndReplaceText of t from s to r	set d to text item delimiters	set text item delimiters to s	set t to t's text items	set text item delimiters to r	tell t to set t to beginning &amp; ({""} &amp; rest)	set text item delimiters to d	tend FindAndReplaceText---------------------------------------------------------------------------------------------------on killApp(badapp)	do shell script "ps ax | grep -i " &amp; quoted form of badapp &amp; " | grep -v grep | cut -c 1-6"	set pNum to result	try		do shell script "kill -9 " &amp; pNum	end tryend killApp---------------------------------------------------------------------------------------------------on menu_click(mList)	-- `menu_click`, by Jacob Rus, September 2006	-- 	-- Accepts a list of form: `{"Finder", "View", "Arrange By", "Date"}`	-- Execute the specified menu item.  In this case, assuming the Finder 	-- is the active application, arranging the frontmost folder by date.	local appName, topMenu, r		-- Validate our input	if mList's length &lt; 3 then error "Menu list is not long enough"		-- Set these variables for clarity and brevity later on	set {appName, topMenu} to (items 1 through 2 of mList)	set r to (items 3 through (mList's length) of mList)		-- This overly-long line calls the menu_recurse function with	-- two arguments: r, and a reference to the top-level menu	tell application "System Events" to my menu_click_recurse(r, ((process appName)'s ¬		(menu bar 1)'s (menu bar item topMenu)'s (menu topMenu)))end menu_clickon menu_click_recurse(mList, parentObject)	local f, r		-- `f` = first item, `r` = rest of items	set f to item 1 of mList	if mList's length &gt; 1 then set r to (items 2 through (mList's length) of mList)		-- either actually click the menu item, or recurse again	tell application "System Events"		if mList's length is 1 then			click parentObject's menu item f		else			my menu_click_recurse(r, (parentObject's (menu item f)'s (menu f)))		end if	end tellend menu_click_recurse---------------------------------------------------------------------------------------------------on permittedChar(theHash)	set theList to {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F"} --(theSourceCode contains "HEX values A-F must be in uppercase in torrent URL's") then		set code_1 to {}	repeat 40 times		set code_1's end to "0"	end repeat		set code_2 to contents of code_1		repeat with x from 1 to count of theHash		repeat with listItem in theList			if item x of theHash contains listItem then				set item x of code_1 to "0"				exit repeat			else				set item x of code_1 to x as string			end if		end repeat	end repeat		if code_1 is code_2 then return true	if code_1 is not code_2 then return falseend permittedChar---------------------------------------------------------------------------------------------------on torrentURL_func(theURL)	try		set theSourceCode to do shell script "curl --silent --show-error --max-time 5 " &amp; quoted form of theURL --max-time means timeout after 5 seconds				if (theSourceCode does not contain "404") then			set torrentURL to theURL		else			set torrentURL to false		end if	end tryend torrentURL_func</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>CCCB12CA-BF88-4614-BE34-F515E40BDAB6</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>51D99B3C-DD81-46A4-BE24-7A8636CBE050</string>
				<key>UUID</key>
				<string>62F797B7-62F4-4F3D-9EB7-E71752B229B8</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>353.000000:995.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/English.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>on run {input, parameters}	killApp("WorkflowServiceRunner")end runon killApp(badapp)	do shell script "ps ax | grep -i " &amp; quoted form of badapp &amp; " | grep -v grep | cut -c 1-6"	set pNum to result	try		do shell script "kill -9 " &amp; pNum	end tryend killApp</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>562440E8-AEF8-4E41-A3F5-DAE2DEE319F3</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>3C6EB0C8-1274-4A83-A3BD-6CFE1976CE2B</string>
				<key>UUID</key>
				<string>6D3326F6-45AC-4CEA-8915-E86A960AC1D7</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>conversionLabel</key>
				<integer>0</integer>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>353.000000:333.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/English.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict>
		<key>15BCFE7F-F0C1-4773-9E81-992B680D259B</key>
		<dict>
			<key>from</key>
			<string>E8AB31C0-36DB-4F67-B2D0-D7666DF3ED24 - E8AB31C0-36DB-4F67-B2D0-D7666DF3ED24</string>
			<key>to</key>
			<string>62F797B7-62F4-4F3D-9EB7-E71752B229B8 - 62F797B7-62F4-4F3D-9EB7-E71752B229B8</string>
		</dict>
		<key>68E84FF0-A80C-4C06-B351-F377395DD3D0</key>
		<dict>
			<key>from</key>
			<string>62F797B7-62F4-4F3D-9EB7-E71752B229B8 - 62F797B7-62F4-4F3D-9EB7-E71752B229B8</string>
			<key>to</key>
			<string>6D3326F6-45AC-4CEA-8915-E86A960AC1D7 - 6D3326F6-45AC-4CEA-8915-E86A960AC1D7</string>
		</dict>
	</dict>
	<key>variables</key>
	<array>
		<dict>
			<key>UUID</key>
			<string>28283114-043D-417C-B7D6-DBF30C9101F1</string>
			<key>identifier</key>
			<string>com.apple.Automator.Variable.Storage</string>
			<key>name</key>
			<string>hash</string>
		</dict>
	</array>
	<key>workflowMetaData</key>
	<dict>
		<key>serviceApplicationBundleID</key>
		<string>org.mozilla.firefox</string>
		<key>serviceApplicationPath</key>
		<string>/Applications/Firefox.app</string>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<integer>0</integer>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
